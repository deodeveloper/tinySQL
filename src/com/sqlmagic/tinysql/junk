dbfFileConnection.java:       String dataDir = url.substring(13);
dbfFileDatabaseMetaData.java: * means match any substring of 0 or more characters, and "_" means match
dbfFileDatabaseMetaData.java:        String dataDir = url.substring(13);
dbfFileDatabaseMetaData.java: *                         token will be handled as substrings
dbfFileDatabaseMetaData.java:               if ( dotAt > -1 ) tableName = tableName.substring(0,dotAt);
dbfFileDriver.java:       if ( url.length() > 13 ) tinySQLGlobals.readLongNames(url.substring(13));
dbfFileDriver.java:    // before bothering with the substring
dbfFileDriver.java:    return url.substring(5,12).equals("dbfFile");
dbfFileTable.java:is now read only once and substrings are generated by each call to GetCol. Incredibly 
dbfFileTable.java:         table = table_name.substring(0,aliasAt);
dbfFileTable.java:         tableAlias = table_name.substring(aliasAt + 2);
dbfFileTable.java:        columnName = columnName.substring(foundDot+1);
dbfFileTable.java:         columnName = columnName.substring(foundDot + 1);
dbfFileTable.java: * @returns a substring of row.
dbfFileTable.java:         return row.substring (0,1);
dbfFileTable.java:      return row.substring(coldef.position, coldef.position + coldef.size);
FieldTokenizer.java:                     tempString = inputString.substring(startPosn,endPosn);
FieldTokenizer.java:                        tempString = inputString.substring(startPosn,endPosn);
FieldTokenizer.java:               tempString = inputString.substring(startPosn,endPosn).trim();
FieldTokenizer.java:         tempString = inputString.substring(startPosn,endPosn+1).trim();
SimpleXMLTag.java:               tagName = inputString.substring(i + 1,tagNameEndAt);
SimpleXMLTag.java:               testString = inputString.substring(i+1,i+tagName.length()+2);
SimpleXMLTag.java:                  bodyString = inputString.substring(startBodyAt,endBodyAt+1);
SimpleXMLTag.java:                        tagLabel = inputString.substring(startBodyAt,embeddedTagAt).trim();
textFileTable.java:      String result = line.substring(pos, pos + size);
textFileTable.java:        writeval = value.substring(0, (int) size);
tinySQLCmd.java:               cmdString = inputString.substring(startAt,endAt);
tinySQLCmd.java:                  con = dbConnect(cmdString.substring(8,cmdString.length()));
tinySQLCmd.java:                  tableName = cmdString.toUpperCase().substring(9);
tinySQLCmd.java:                     parameterIndex = Integer.parseInt(cmdString.substring(b1+1,b2));
tinySQLCmd.java:                     parameterString = cmdString.substring(b2+1);
tinySQLCmd.java:         return outputString.substring(0,padLength);
tinySQLCmd.java:         return outputString.substring(0,padLength);
tinySQLDatabaseMetaData.java: * means match any substring of 0 or more characters, and "_" means match
tinySQLDriver.java:    // before bothering with the substring
tinySQLDriver.java:    return url.substring(5,12).equals("tinySQL");
tinySQLGlobals.java:      shortColumnName = "COL" + countString.substring(countString.length() - 5);
tinySQLParser.java:               nextField = nextField.substring(9).trim();
tinySQLParser.java:         columnName = columnName.substring(1,columnName.length() - 1);
tinySQLResultSet.java:    if ( dotAt > -1 ) str = str.substring(0,dotAt);
tinySQLResultSetMetaData.java:    if ( dotAt > -1 ) columnName = col.name.substring(dotAt + 1);
tinySQLWhere.java:         lastWord = fields[i].substring(fields[i].lastIndexOf(" ") + 1);
tinySQLWhere.java:               wherePhrase = nextField.substring(startAt,foundKeyWord);
tinySQLWhere.java:                  andOr = upperField.substring(foundKeyWord+1,foundKeyWord+3);
tinySQLWhere.java:                     left = wherePhrase.substring(0,foundComp).trim();
tinySQLWhere.java:                     right = wherePhrase.substring(foundComp + comp.length()).trim();
tinySQLWhere.java:         tableAlias = findColumn.substring(0,dotAt);
tsColumn.java:                  tableName = upperName.substring(0,dotAt);
tsColumn.java:                  upperName = upperName.substring(dotAt + 1);
tsColumn.java:               stringValue = stringValue.substring(startAt - 1 ,startAt + charCount - 1);
Utils.java:      return tmp.toString().substring(0, size);  // do cutting
Utils.java:      return str.substring(0, size).getBytes(encode);  // do cutting
Utils.java:    String str = file.substring(begin, end);
UtilString.java:         return trimString.substring(1,trimString.length() - 1);
UtilString.java:      stdDateString = dateString.substring(0,4) + "-" 
UtilString.java:      + dateString.substring(4,6) + "-"
UtilString.java:      + dateString.substring(6,8); 
UtilString.java:         dateString = dateString.substring(0,4) + dateString.substring(5,7)
UtilString.java:         + dateString.substring(8,10);
UtilString.java:            year = Integer.parseInt(dateString.substring(0,4));
UtilString.java:            month = Integer.parseInt(dateString.substring(4,6));
UtilString.java:            day = Integer.parseInt(dateString.substring(6,8));
UtilString.java:         dateString = dateString.substring(8,dateString.length()-1);
UtilString.java:      while ( inputString.substring(startIndex).indexOf(oldString) > -1 )
UtilString.java:         nextIndex = startIndex + inputString.substring(startIndex).indexOf(oldString);
UtilString.java:            outputString.append(inputString.substring(startIndex,nextIndex));
UtilString.java:         outputString.append(inputString.substring(startIndex));
UtilString.java:      return tableAndAlias.substring(0,aliasAt);
UtilString.java:         tableName = tableAndAlias.substring(0,aliasAt);
UtilString.java:         tableAlias = tableAndAlias.substring(aliasAt + 2);
